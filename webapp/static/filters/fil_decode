#!/usr/bin/python
#
# Diamond example image filter
#
# This code is licensed under a permissive license and is meant to be
# copied and incorporated into other projects.
#
# Copyright (c) 2012, Carnegie Mellon University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
# * Neither the name of the Carnegie Mellon University nor the names
#    of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

from cStringIO import StringIO
from opendiamond.filter import Filter
import PIL.Image

class SimpleImageDecoder(Filter):
    def __call__(self, obj):
        # Decode image
        try:
            image = PIL.Image.open(StringIO(obj.get_binary('')))
        except IOError:
            return 0

        # Set traditional image attributes
        obj.set_rgbimage('_rgb_image.rgbimage', image)
        obj.omit('_rgb_image.rgbimage')
        width, height = image.size
        obj.set_int('_cols.int', width)
        obj.set_int('_rows.int', height)

        # Create thumbnail
        image.thumbnail((200, 200))
        buf = StringIO()
        image.save(buf, 'jpeg', quality=90)
        obj.set_binary('thumbnail.jpeg', buf.getvalue())

        return 1


if __name__ == '__main__':
    SimpleImageDecoder.run()
